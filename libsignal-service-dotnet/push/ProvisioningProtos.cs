// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Provisioning.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace libsignalservice.push
{

    /// <summary>Holder for reflection information generated from Provisioning.proto</summary>
    public static partial class ProvisioningReflection
    {

        #region Descriptor
        /// <summary>File descriptor for Provisioning.proto</summary>
        public static pbr::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }
        private static pbr::FileDescriptor descriptor;

        static ProvisioningReflection()
        {
            byte[] descriptorData = global::System.Convert.FromBase64String(
                string.Concat(
                  "ChJQcm92aXNpb25pbmcucHJvdG8SCnRleHRzZWN1cmUiWQoRUHJvdmlzaW9u",
                  "RW52ZWxvcGUSEwoJcHVibGljS2V5GAEgASgMSAASDgoEYm9keRgCIAEoDEgB",
                  "QhEKD3B1YmxpY0tleV9vbmVvZkIMCgpib2R5X29uZW9mItwBChBQcm92aXNp",
                  "b25NZXNzYWdlEhsKEWlkZW50aXR5S2V5UHVibGljGAEgASgMSAASHAoSaWRl",
                  "bnRpdHlLZXlQcml2YXRlGAIgASgMSAESEAoGbnVtYmVyGAMgASgJSAISGgoQ",
                  "cHJvdmlzaW9uaW5nQ29kZRgEIAEoCUgDQhkKF2lkZW50aXR5S2V5UHVibGlj",
                  "X29uZW9mQhoKGGlkZW50aXR5S2V5UHJpdmF0ZV9vbmVvZkIOCgxudW1iZXJf",
                  "b25lb2ZCGAoWcHJvdmlzaW9uaW5nQ29kZV9vbmVvZkJZCitvcmcud2hpc3Bl",
                  "cnN5c3RlbXMudGV4dHNlY3VyZS5pbnRlcm5hbC5wdXNoQhJQcm92aXNpb25p",
                  "bmdQcm90b3OqAhVsaWJzaWduYWxzZXJ2aWNlLnB1c2hiBnByb3RvMw=="));
            descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
                new pbr::FileDescriptor[] { },
                new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.ProvisionEnvelope), global::libsignalservice.push.ProvisionEnvelope.Parser, new[]{ "PublicKey", "Body" }, new[]{ "PublicKeyOneof", "BodyOneof" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.ProvisionMessage), global::libsignalservice.push.ProvisionMessage.Parser, new[]{ "IdentityKeyPublic", "IdentityKeyPrivate", "Number", "ProvisioningCode" }, new[]{ "IdentityKeyPublicOneof", "IdentityKeyPrivateOneof", "NumberOneof", "ProvisioningCodeOneof" }, null, null)
                }));
        }
        #endregion

    }
    #region Messages
    public sealed partial class ProvisionEnvelope : pb::IMessage<ProvisionEnvelope>
    {
        private static readonly pb::MessageParser<ProvisionEnvelope> _parser = new pb::MessageParser<ProvisionEnvelope>(() => new ProvisionEnvelope());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ProvisionEnvelope> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::libsignalservice.push.ProvisioningReflection.Descriptor.MessageTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ProvisionEnvelope()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ProvisionEnvelope(ProvisionEnvelope other) : this()
        {
            switch (other.PublicKeyOneofCase)
            {
                case PublicKeyOneofOneofCase.PublicKey:
                    PublicKey = other.PublicKey;
                    break;
            }

            switch (other.BodyOneofCase)
            {
                case BodyOneofOneofCase.Body:
                    Body = other.Body;
                    break;
            }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ProvisionEnvelope Clone()
        {
            return new ProvisionEnvelope(this);
        }

        /// <summary>Field number for the "publicKey" field.</summary>
        public const int PublicKeyFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString PublicKey
        {
            get { return publicKeyOneofCase_ == PublicKeyOneofOneofCase.PublicKey ? (pb::ByteString)publicKeyOneof_ : pb::ByteString.Empty; }
            set
            {
                publicKeyOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                publicKeyOneofCase_ = PublicKeyOneofOneofCase.PublicKey;
            }
        }

        /// <summary>Field number for the "body" field.</summary>
        public const int BodyFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Body
        {
            get { return bodyOneofCase_ == BodyOneofOneofCase.Body ? (pb::ByteString)bodyOneof_ : pb::ByteString.Empty; }
            set
            {
                bodyOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                bodyOneofCase_ = BodyOneofOneofCase.Body;
            }
        }

        private object publicKeyOneof_;
        /// <summary>Enum of possible cases for the "publicKey_oneof" oneof.</summary>
        public enum PublicKeyOneofOneofCase
        {
            None = 0,
            PublicKey = 1,
        }
        private PublicKeyOneofOneofCase publicKeyOneofCase_ = PublicKeyOneofOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PublicKeyOneofOneofCase PublicKeyOneofCase
        {
            get { return publicKeyOneofCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPublicKeyOneof()
        {
            publicKeyOneofCase_ = PublicKeyOneofOneofCase.None;
            publicKeyOneof_ = null;
        }

        private object bodyOneof_;
        /// <summary>Enum of possible cases for the "body_oneof" oneof.</summary>
        public enum BodyOneofOneofCase
        {
            None = 0,
            Body = 2,
        }
        private BodyOneofOneofCase bodyOneofCase_ = BodyOneofOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BodyOneofOneofCase BodyOneofCase
        {
            get { return bodyOneofCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearBodyOneof()
        {
            bodyOneofCase_ = BodyOneofOneofCase.None;
            bodyOneof_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ProvisionEnvelope);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ProvisionEnvelope other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (PublicKey != other.PublicKey) return false;
            if (Body != other.Body) return false;
            if (PublicKeyOneofCase != other.PublicKeyOneofCase) return false;
            if (BodyOneofCase != other.BodyOneofCase) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (publicKeyOneofCase_ == PublicKeyOneofOneofCase.PublicKey) hash ^= PublicKey.GetHashCode();
            if (bodyOneofCase_ == BodyOneofOneofCase.Body) hash ^= Body.GetHashCode();
            hash ^= (int)publicKeyOneofCase_;
            hash ^= (int)bodyOneofCase_;
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (publicKeyOneofCase_ == PublicKeyOneofOneofCase.PublicKey)
            {
                output.WriteRawTag(10);
                output.WriteBytes(PublicKey);
            }
            if (bodyOneofCase_ == BodyOneofOneofCase.Body)
            {
                output.WriteRawTag(18);
                output.WriteBytes(Body);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (publicKeyOneofCase_ == PublicKeyOneofOneofCase.PublicKey)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(PublicKey);
            }
            if (bodyOneofCase_ == BodyOneofOneofCase.Body)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(Body);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ProvisionEnvelope other)
        {
            if (other == null)
            {
                return;
            }
            switch (other.PublicKeyOneofCase)
            {
                case PublicKeyOneofOneofCase.PublicKey:
                    PublicKey = other.PublicKey;
                    break;
            }

            switch (other.BodyOneofCase)
            {
                case BodyOneofOneofCase.Body:
                    Body = other.Body;
                    break;
            }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            PublicKey = input.ReadBytes();
                            break;
                        }
                    case 18:
                        {
                            Body = input.ReadBytes();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ProvisionMessage : pb::IMessage<ProvisionMessage>
    {
        private static readonly pb::MessageParser<ProvisionMessage> _parser = new pb::MessageParser<ProvisionMessage>(() => new ProvisionMessage());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ProvisionMessage> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::libsignalservice.push.ProvisioningReflection.Descriptor.MessageTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ProvisionMessage()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ProvisionMessage(ProvisionMessage other) : this()
        {
            switch (other.IdentityKeyPublicOneofCase)
            {
                case IdentityKeyPublicOneofOneofCase.IdentityKeyPublic:
                    IdentityKeyPublic = other.IdentityKeyPublic;
                    break;
            }

            switch (other.IdentityKeyPrivateOneofCase)
            {
                case IdentityKeyPrivateOneofOneofCase.IdentityKeyPrivate:
                    IdentityKeyPrivate = other.IdentityKeyPrivate;
                    break;
            }

            switch (other.NumberOneofCase)
            {
                case NumberOneofOneofCase.Number:
                    Number = other.Number;
                    break;
            }

            switch (other.ProvisioningCodeOneofCase)
            {
                case ProvisioningCodeOneofOneofCase.ProvisioningCode:
                    ProvisioningCode = other.ProvisioningCode;
                    break;
            }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ProvisionMessage Clone()
        {
            return new ProvisionMessage(this);
        }

        /// <summary>Field number for the "identityKeyPublic" field.</summary>
        public const int IdentityKeyPublicFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString IdentityKeyPublic
        {
            get { return identityKeyPublicOneofCase_ == IdentityKeyPublicOneofOneofCase.IdentityKeyPublic ? (pb::ByteString)identityKeyPublicOneof_ : pb::ByteString.Empty; }
            set
            {
                identityKeyPublicOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                identityKeyPublicOneofCase_ = IdentityKeyPublicOneofOneofCase.IdentityKeyPublic;
            }
        }

        /// <summary>Field number for the "identityKeyPrivate" field.</summary>
        public const int IdentityKeyPrivateFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString IdentityKeyPrivate
        {
            get { return identityKeyPrivateOneofCase_ == IdentityKeyPrivateOneofOneofCase.IdentityKeyPrivate ? (pb::ByteString)identityKeyPrivateOneof_ : pb::ByteString.Empty; }
            set
            {
                identityKeyPrivateOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                identityKeyPrivateOneofCase_ = IdentityKeyPrivateOneofOneofCase.IdentityKeyPrivate;
            }
        }

        /// <summary>Field number for the "number" field.</summary>
        public const int NumberFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Number
        {
            get { return numberOneofCase_ == NumberOneofOneofCase.Number ? (string)numberOneof_ : ""; }
            set
            {
                numberOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                numberOneofCase_ = NumberOneofOneofCase.Number;
            }
        }

        /// <summary>Field number for the "provisioningCode" field.</summary>
        public const int ProvisioningCodeFieldNumber = 4;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ProvisioningCode
        {
            get { return provisioningCodeOneofCase_ == ProvisioningCodeOneofOneofCase.ProvisioningCode ? (string)provisioningCodeOneof_ : ""; }
            set
            {
                provisioningCodeOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                provisioningCodeOneofCase_ = ProvisioningCodeOneofOneofCase.ProvisioningCode;
            }
        }

        private object identityKeyPublicOneof_;
        /// <summary>Enum of possible cases for the "identityKeyPublic_oneof" oneof.</summary>
        public enum IdentityKeyPublicOneofOneofCase
        {
            None = 0,
            IdentityKeyPublic = 1,
        }
        private IdentityKeyPublicOneofOneofCase identityKeyPublicOneofCase_ = IdentityKeyPublicOneofOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IdentityKeyPublicOneofOneofCase IdentityKeyPublicOneofCase
        {
            get { return identityKeyPublicOneofCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearIdentityKeyPublicOneof()
        {
            identityKeyPublicOneofCase_ = IdentityKeyPublicOneofOneofCase.None;
            identityKeyPublicOneof_ = null;
        }

        private object identityKeyPrivateOneof_;
        /// <summary>Enum of possible cases for the "identityKeyPrivate_oneof" oneof.</summary>
        public enum IdentityKeyPrivateOneofOneofCase
        {
            None = 0,
            IdentityKeyPrivate = 2,
        }
        private IdentityKeyPrivateOneofOneofCase identityKeyPrivateOneofCase_ = IdentityKeyPrivateOneofOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IdentityKeyPrivateOneofOneofCase IdentityKeyPrivateOneofCase
        {
            get { return identityKeyPrivateOneofCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearIdentityKeyPrivateOneof()
        {
            identityKeyPrivateOneofCase_ = IdentityKeyPrivateOneofOneofCase.None;
            identityKeyPrivateOneof_ = null;
        }

        private object numberOneof_;
        /// <summary>Enum of possible cases for the "number_oneof" oneof.</summary>
        public enum NumberOneofOneofCase
        {
            None = 0,
            Number = 3,
        }
        private NumberOneofOneofCase numberOneofCase_ = NumberOneofOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NumberOneofOneofCase NumberOneofCase
        {
            get { return numberOneofCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearNumberOneof()
        {
            numberOneofCase_ = NumberOneofOneofCase.None;
            numberOneof_ = null;
        }

        private object provisioningCodeOneof_;
        /// <summary>Enum of possible cases for the "provisioningCode_oneof" oneof.</summary>
        public enum ProvisioningCodeOneofOneofCase
        {
            None = 0,
            ProvisioningCode = 4,
        }
        private ProvisioningCodeOneofOneofCase provisioningCodeOneofCase_ = ProvisioningCodeOneofOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ProvisioningCodeOneofOneofCase ProvisioningCodeOneofCase
        {
            get { return provisioningCodeOneofCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearProvisioningCodeOneof()
        {
            provisioningCodeOneofCase_ = ProvisioningCodeOneofOneofCase.None;
            provisioningCodeOneof_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ProvisionMessage);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ProvisionMessage other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (IdentityKeyPublic != other.IdentityKeyPublic) return false;
            if (IdentityKeyPrivate != other.IdentityKeyPrivate) return false;
            if (Number != other.Number) return false;
            if (ProvisioningCode != other.ProvisioningCode) return false;
            if (IdentityKeyPublicOneofCase != other.IdentityKeyPublicOneofCase) return false;
            if (IdentityKeyPrivateOneofCase != other.IdentityKeyPrivateOneofCase) return false;
            if (NumberOneofCase != other.NumberOneofCase) return false;
            if (ProvisioningCodeOneofCase != other.ProvisioningCodeOneofCase) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (identityKeyPublicOneofCase_ == IdentityKeyPublicOneofOneofCase.IdentityKeyPublic) hash ^= IdentityKeyPublic.GetHashCode();
            if (identityKeyPrivateOneofCase_ == IdentityKeyPrivateOneofOneofCase.IdentityKeyPrivate) hash ^= IdentityKeyPrivate.GetHashCode();
            if (numberOneofCase_ == NumberOneofOneofCase.Number) hash ^= Number.GetHashCode();
            if (provisioningCodeOneofCase_ == ProvisioningCodeOneofOneofCase.ProvisioningCode) hash ^= ProvisioningCode.GetHashCode();
            hash ^= (int)identityKeyPublicOneofCase_;
            hash ^= (int)identityKeyPrivateOneofCase_;
            hash ^= (int)numberOneofCase_;
            hash ^= (int)provisioningCodeOneofCase_;
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (identityKeyPublicOneofCase_ == IdentityKeyPublicOneofOneofCase.IdentityKeyPublic)
            {
                output.WriteRawTag(10);
                output.WriteBytes(IdentityKeyPublic);
            }
            if (identityKeyPrivateOneofCase_ == IdentityKeyPrivateOneofOneofCase.IdentityKeyPrivate)
            {
                output.WriteRawTag(18);
                output.WriteBytes(IdentityKeyPrivate);
            }
            if (numberOneofCase_ == NumberOneofOneofCase.Number)
            {
                output.WriteRawTag(26);
                output.WriteString(Number);
            }
            if (provisioningCodeOneofCase_ == ProvisioningCodeOneofOneofCase.ProvisioningCode)
            {
                output.WriteRawTag(34);
                output.WriteString(ProvisioningCode);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (identityKeyPublicOneofCase_ == IdentityKeyPublicOneofOneofCase.IdentityKeyPublic)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(IdentityKeyPublic);
            }
            if (identityKeyPrivateOneofCase_ == IdentityKeyPrivateOneofOneofCase.IdentityKeyPrivate)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(IdentityKeyPrivate);
            }
            if (numberOneofCase_ == NumberOneofOneofCase.Number)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Number);
            }
            if (provisioningCodeOneofCase_ == ProvisioningCodeOneofOneofCase.ProvisioningCode)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ProvisioningCode);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ProvisionMessage other)
        {
            if (other == null)
            {
                return;
            }
            switch (other.IdentityKeyPublicOneofCase)
            {
                case IdentityKeyPublicOneofOneofCase.IdentityKeyPublic:
                    IdentityKeyPublic = other.IdentityKeyPublic;
                    break;
            }

            switch (other.IdentityKeyPrivateOneofCase)
            {
                case IdentityKeyPrivateOneofOneofCase.IdentityKeyPrivate:
                    IdentityKeyPrivate = other.IdentityKeyPrivate;
                    break;
            }

            switch (other.NumberOneofCase)
            {
                case NumberOneofOneofCase.Number:
                    Number = other.Number;
                    break;
            }

            switch (other.ProvisioningCodeOneofCase)
            {
                case ProvisioningCodeOneofOneofCase.ProvisioningCode:
                    ProvisioningCode = other.ProvisioningCode;
                    break;
            }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            IdentityKeyPublic = input.ReadBytes();
                            break;
                        }
                    case 18:
                        {
                            IdentityKeyPrivate = input.ReadBytes();
                            break;
                        }
                    case 26:
                        {
                            Number = input.ReadString();
                            break;
                        }
                    case 34:
                        {
                            ProvisioningCode = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    #endregion

}

#endregion Designer generated code
